C Sharp Programs
-Write a C# Program to read a number and display the given number is odd or even. Use class and Objects to call Separate Function to read and display
-Write a C# Program to Print a Square of a Number.
-Write a C# Program to check whether the given number is positive or negative or zero.
-Write a C# Program to Read A Person Using Class and Object.
-Write a C# program to reverse a number.
-Write a C# Program to read a number and calculate the Sum of each Digits.
-Write a C# Program to demonstrate vehicle class with different vehicles as objects and common methods like Start and Stop. Use interface to create object for each vehicle class.

-Write a C# Program to implement the following scenario:
A restaurant chain wants to manage how its various deserts are prepared.
All deserts have some common Steps:
1. Add Sugar
2. Serve to the Customer
However the main preparation step varies depending on the desert type:
A. Ice-cream : Churn and Freeze the mixture
B. Cake : Bake in the oven
C. Gulab Jamun : fry dough balls and soak in syrup.

-Create a base class Bank Account with methods to deposit and Withdraw money
create a derived class Savings Account that adds Interest Calculation Functionality

-Library Management : Create a class Book with title and author fields ,derive a class E-book that adds File size and format properties.

-Vehicles Rental Service : Create a base class Vehicle with model , brand and rental price per day. Create a derived class Car that adds number of seats and fuel type.

-Online Store : Create a class Product which has name and price properties. Create A derived class Electronic Product which has brand and warranty. Smartphone class has OS and Storage capacity. Implement suitable inheritance to display complete product details(m)

-Payment Processing System : Create a Payment class which has amount and date. Create a Credit Card Payment Class with card number and card holder name. Create a UPI Payment with UPI id and Bank name . Implement payment Processing for both methods.(h)

-Write a C# Program to demonstrate the usage of all 6 access specifiers with the following example:
Create a class bank account with fields and methods using different access specifiers:
1.Public - Account holder
2.Private - balance
3.protected - bank name
4.Internal - IFSC code
5.Protevcted internal - branch
6.private protected - account type
Create a derived class Savings Account and show which members are accessible.
Create a non derived class other classes in the same assembly and show which members are accessible.
In the main method create objects of bank acc ,savings acc and other classes to demonstrate the accessibilities of these members.


-Write a C# program to accept two numbers and an operation to be handled(+,-,*,/). Raise Divide by Zero exception if denominator has zero value. Raise Format Exception if user inputs a non numeric value. Use a finally block to display Calculation complete message.

-Write a C# program to read a initial balance of 5000 for a bank account. Ask user for withdrawal amount. Raise a Insufficient Funds Exception if the withdrawal amount is greater than the balance throw custom exception otherwise update and print the new balance.

-Create a simple library system to maintain list of book ids. If user tries to borrow a book that doesn't exist, throw Book Not Found Exception. Handle this with proper message.

-You are designing a simple Student grading system . Each Student must have marks between 0- 100. If a student enters invalid marks , throw a custom exception Invalid Marks Exception :
- Create a Class Invalid Marks Exception that inherits from Exception.
- Has a constructor with message "invalid Marks'"
- Stores the invalid marks in a property .
- Has a method Get Error Details which returns a formatted error message.
In the program class accept Marks from the user. Check if marks > 0 or < 100 throw Invalid Marks Exception. Catch the exception and display error Details.
Add Another wrongly designed method that auto corrects marks inside the Exception that automatically adjusts marks to the nearest valid range (E.g. :-5 to 0 ,120 to 100).Understand why this a bad practice to include business logic in exception. Find the suitable way to add this auto correct marks logic.
